<?php
// $Id$
/**
 * @file
 * Primarily Drupal hooks and global API functions to manipulate activity.
 *
 * This is the main module file for Activity.
 */

/**
 * Implementation of hook_ctools_plugin_api().
 */
function ron_ctools_plugin_api($module, $api) {
  if ($module == 'ron' && $api == 'plugins') {
    return array('version' => 3);
  }
}

/**
 * Implementation of hook_ron_plugins().
 *
 * This is a ctools plugins hook.
 */
function ron_ron_plugins() {
  module_load_include('inc', 'ron', '/includes/ron.plugins');
  return _ron_ron_plugins();
}

/**
 * Implementation of hook_views_api().
 */
function ron_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'ron') . '/includes',
  );
}

/**
 * Get a plugin handler.
 */
function ron_get_plugin($key, $info = array(), $reset = FALSE) {
  global $user;
  static $cache = array();
  if (empty($cache[$key]) || $reset) {
    ctools_include('plugins');
    $plugins = ctools_get_plugins('ron', 'plugins');
    if (isset($plugins[$key]) && $class = ctools_plugin_get_class($plugins[$key], 'handler')) {
      // Add defaults.
      $info += array(
        'plugin' => $plugins[$key],
        'message_id' => '',
        'account' => $user,
      );
      $cache[$key] = new $class($plugins[$key], $info);
    }
  }
  return !empty($cache[$key]) ? $cache[$key] : FALSE;
}

/**
 * Get messages by their ID.
 *
 * @param $message_id
 *   The message ID.
 * @return
 *   Array  keyed by the message realm and the realm Id as the value.
 */
function ron_get_message_realm($message_id) {
  static $messages = array();

  if (!isset($messages[$message_id])) {
    $result = db_query("SELECT * FROM {ron_messages_realm} WHERE iid = %d", $message_id);

    while ($row = db_fetch_object($result)) {
      $messages[$message_id][$row->realm][$row->realm_id] = $row->realm_id;
    }
  }
  return $messages[$message_id] ;
}

/**
 * Get a message template record.
 */
function ron_get_message($message_id) {
  return db_fetch_object(db_query("SELECT * FROM {ron_messages} WHERE mid = %d", $message_id));
}

/**
 * Get a message instance record.
 */
function ron_get_message_instance($instance_id) {
  $return = db_fetch_object(db_query("SELECT * FROM {ron_messages_instance} WHERE iid = %d", $instance_id));
  // Unserialize the arguments.
  if (!empty($return->arguments)) {
    $return->arguments = unserialize($return->arguments);
  }
  return $return;
}


/**
 * Show a message by the message instance ID.
 *
 * @param $instance_id
 * @param $account
 * @return unknown_type
 */
function ron_show_message($instance_id, $account = NULL) {
  $output = '';
  $access = FALSE;
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  $message_instance = ron_get_message_instance($instance_id);

  if ($messages = ron_get_message_realm($message_instance->mid)) {
    $plugins = ctools_get_plugins('ron', 'plugins');
    foreach ($plugins as $name => $value) {
      if ($plugin = ron_get_plugin($name, array($name, array('message_id' => $message_instance->mid)))) {
        if ($plugin->access()) {
          $access = TRUE;
          break;
        }
      }
    }

    if ($access) {
      // Get the message template
      $output = ron_t($message_instance);
    }
  }

  return $output;
}

/**
 * Replace he arguments with their placeholders.
 *
 * @param $message
 *   The message instance object.
 *
 * @see t().
 */
function ron_t($message_instance) {
  $message = ron_get_message($message_instance->mid);

  if (module_exists(i18nstrings)) {
    $string = i18nstrings("ron:ron_message:$message->mid:message", $message->message);
  }
  else {
    $string = $message->message;
  }

  if (empty($message_instance->arguments)) {
    return $string;
  }
  else {
    // Transform arguments before inserting them.
    foreach ($message_instance->arguments as $key => $value) {
      switch ($key[0]) {
        case '@':
          // Escaped only.
          $args[$key] = check_plain($value);
          break;

        case '%':
        default:
          // Escaped and placeholder.
          $args[$key] = theme('placeholder', $value);
          break;

        case '!':
          // Pass-through.
      }
    }
    return strtr($string, $args);
  }
}