<?php

use Drupal\Core\Entity\ContentEntityBase;
use Drupal\message\Controller\MessageController;
use Drupal\node\Entity\Node;
use Drupal\comment\Entity\Comment;
use Drupal\user\Entity\User;
/**
 * @file
 * Message example module.
 *
 * @todo: replace all the placeholders to tokens.
 */

/**
 * Implements hook_node_insert().
 */
function message_example_node_insert(Node $node) {
  $entity_render = entity_view($node, 'teaser');

  $message = MessageController::MessageCreate(array('type' => 'example_create_node', 'uid' => $node->get('uid')));
  $message->set('field_node_reference', $node);
  $message->setArguments(array(
    '@node-title' => $node->label(),
    '@node-url' => $node->url(),
    '@user-name' => $node->getOwner()->label(),
    '@user-url' => $node->getOwner()->url(),
    '!node-teaser' => drupal_render($entity_render),
  ));
  $message->save();
}

/**
 * Implements hook_comment_insert().
 */
function message_example_comment_insert(Comment $comment) {
  $entity_render = entity_view($comment->getCommentedEntity(), 'teaser');

  $message = MessageController::MessageCreate(array('type' => 'example_create_comment', 'uid' => $comment->getOwnerId()));
  $message->set('field_comment_reference', $comment);
  $message->setArguments(array(
    '@user-url' => $comment->getOwner()->url(),
    '@user-name' => $comment->getOwner()->label(),
    '@comment-url' => $comment->url(),
    '@node-title' => $comment->getCommentedEntity()->label(),
    '!node-render' => drupal_render($entity_render),
  ));
  $message->save();
}

/**
 * Implements hook_user_insert()
 */
function message_example_user_insert(User $account) {
  MessageController::MessageCreate(array('type' => 'example_user_register', 'uid' => $account->id()))
    ->setArguments(array(
      '@user-url' => $account->url(),
      '@user-name' => $account->label(),
    ))
    ->save();
}

/**
 * Implements hook_node_update().
 */
function message_example_node_update(Node $node) {
  if (empty($node->original)) {
    return;
  }

  message_example_update_message_status($node);
}

/**
 * Implements hook_comment_update().
 */
function message_example_comment_update(Comment $comment) {
  if (empty($comment->original)) {
    return;
  }

  message_example_update_message_status($comment);
}

/**
 * Update the "published" field in the message entity, when it changes in the
 * related entity.
 *
 * @param ContentEntityBase $entity
 *   The entity object.
 */
function message_example_update_message_status(ContentEntityBase $entity) {
  if ($entity->isPublished() == $entity->original->isPublished()) {
    return;
  }

  $query = \Drupal::entityQuery('message');

  $field = 'field_' . $entity->getEntityType()->id() . '_reference';
  $query->condition($field . '.target_id', $entity->id());

  $results = $query->execute();

  if (empty($results)) {
    return;
  }

  $messages = MessageController::MessageLoadMultiple($results);

  foreach ($messages as $message) {
    // todo: The un comment code. We need for that published field.
  }

  return;

  foreach (array_keys($result['message']) as $mid) {
    $wrapper = entity_metadata_wrapper('message', $mid);
    // If comment status changed, we still need to check the node as-well.
    if ($entity_type == 'comment') {
      $node = node_load($entity->nid);
      $status = intval($entity->status && $node->status);
    }
    else {
      // The entity is the node.
      $status = $entity->status;
    }
    if ($wrapper->field_published->value() != $status) {
      // Status changed, so update the message entity.
      $wrapper->field_published->set($status);
      $wrapper->save();
    }
  }
}
