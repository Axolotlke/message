<?php

/**
 * @file
 * API functions to manipulate messages.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\message\Controller\MessageController;

/**
 * Define the name of the message realm field.
 */
define('MESSAGE_FIELD_MESSAGE_TEXT', 'message_text');

/**
 * The maximal amount of messages to be purged upon hook_cron()
 */
define('MESSAGE_PURGE_LIMIT', 100);

/**
 * Drupal 8 part. Remove this comment after finishing the porting process.
 */

/**
 * Implements hook_config_translation_info_alter().
 */
function message_config_translation_info_alter(&$info) {
  $info['message_type']['class'] = '\Drupal\message\MessageConfigEntityMapper';
}

/**
 * Implements hook_entity_delete().
 *
 * Handles messages deletion when referenced entities are being deleted.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object for the entity that has been deleted.
 */
function message_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  $type = $entity->getEntityType()->id();
  if ($type == 'message') {
    // Why not message?
    return;
  }

  $types = \Drupal::config('message.message')->get('delete_on_entity_delete');

  if (!$types || !in_array($type, $types)) {
    return;
  }

  // List of messages to delete.
  $deletable_mids = array();
  // List of messages that might be deleted;
  // Messages with references to fields with multiple cardinality will be
  // stored in $check_mids in order to check if the entity being deleted
  // is the last one referenced by a given field.
  // Keyed by message ID, pointing to array of the relevant field names.
  $check_mids = array();

  $fields_ids = \Drupal::entityQuery('field_config')->execute();
  /** @var FieldConfig[] $fields */
  $fields = entity_load_multiple('field_config', array_keys($fields_ids));

  // Search for fields in which messages referenced the deleted entity.
  foreach ($fields as $field) {
    if ($field->get('entity_type') != 'message') {
      // This field isn't used in any message.
      continue;
    }

    // Only delete messages due to referenced entity or referenced taxonomy term
    // deletion.
    if (!in_array($field->getType(), array('entity_reference', 'taxonomy_term_reference'))) {
      continue;
    }

    $query = \Drupal::entityQuery('message');
    $results = $query
      ->condition($field->getName(), $entity->id())
      ->execute();

    if (empty($results)) {
      continue;
    }

    if ($field->getCardinality() == 1) {
      $deletable_mids += array_keys($results);
    }
    else {
      $messages = MessageController::MessageLoadMultiple($results);

      foreach ($messages as $message) {
        $check_mids[$message->id()][] = $field->getName();
      }
    }
  }

  // Check messages with multiple cardinality references; Only delete such
  // messages if the entity being deleted is the last one referenced by the
  // message.
  if ($check_mids) {
    $messages = MessageController::MessageLoadMultiple(array_keys($check_mids));
    foreach ($messages as $message) {
      foreach ($check_mids[$message->id()] as $field_name) {

        // We need to check if the field is references is empty.
        if (count($message->get($field_name)->referencedEntities()) === 0) {
          $deletable_mids[] = $message->id();
        }
      }
    }
  }

  if ($deletable_mids) {
    // Delete messages.
    $messages = MessageController::MessageLoadMultiple($deletable_mids);
    MessageController::MessageDeleteMultiple($messages);
  }
}

/**
 * Implements hook_permission().
 *
 * @deprecated
 *  We might need to remove this.
 */
function message_permission() {
  $permissions = array();

  $permissions['administer message types'] = array(
    'title' => t('Administer message types'),
    'description' => t('Administer message types that can be used to log an event.'),
  );

  $permissions['overview messages'] = array(
    'title' => t('Overview messages'),
    'description' => t('Grant permission to view the messages in the site.'),
  );

  return $permissions;
}

/**
 * Drupal 7 part. We can, and should, take parts from here during the porting to
 * Drupal 8.
 */

/**
 * Implements hook_theme().
 *
 * @deprecated
 *  We might need to remove this.
 */
function message_theme() {
  $info['message'] = array(
    'render element' => 'elements',
    'template' => 'message',
  );

  return $info;
}

/**
 * Implements hook_message_view_alter().
 *
 * @deprecated
 *  We might need to remove this.
 */
function message_message_view_alter(&$build) {
  $build['#theme'] = 'message';
}

/**
 * Process variables for message.tpl.php.
 *
 * @deprecated
 *  We might need to remove this.
 */
function template_preprocess_message(&$variables) {
  $message = $variables['elements']['#entity'];

  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['message'] = $message;

  // Helpful $content variable for templates.
  $variables['content'] = array();
  foreach (element_children($variables['elements']) as $key) {
  }

  // Make the field variables available with the appropriate language.
  field_attach_preprocess('message', $message, $variables['content'], $variables);
  list(, , $bundle) = entity_extract_ids('message', $message);

  // Gather CSS classes.
  $variables['classes_array'][] = drupal_html_class('entity-message');
  $variables['classes_array'][] = drupal_html_class('message-' . $bundle);

  // Add suggestions.
  $variables['theme_hook_suggestions'][] = 'message';
  $variables['theme_hook_suggestions'][] = 'message__' . $bundle;
  $variables['theme_hook_suggestions'][] = 'message__' . $bundle . '__' . $variables['view_mode'];

  if ($id = entity_id('message', $message)) {
    $variables['theme_hook_suggestions'][] = 'message__' . $id;
  }
}

/**
 * Implements hook_cron().
 *
 * Fetch all message types and purge old messages.
 *
 * @todo: Upgrade.
 *
 * @deprecated
 *  We might need to remove this.
 */
function message_cron() {
  return;

  // The maximal amount of messages to purge per cron run.
  $purge_limit = variable_get('message_delete_cron_limit', MESSAGE_PURGE_LIMIT);
  // Messages to be deleted.
  $purge_messages = array();
  // Names of non global-purge-settings overriding message types.
  $no_override_type_names = array();
  // Message types that override global purge settings.
  $override_types = array();

  // Iterate all message types to distinguish between overriding and non-
  // overriding types.
  foreach (message_type_load() as $message_type) {
    if (empty($message_type->data['purge']['override'])) {
      $no_override_type_names[] = $message_type->name;
    }
    else {
      // For overriding types, store the type and not its name to later extract
      // the specific purge settings.
      $override_types[] = $message_type;
    }
  }

  // Gather purgeable messages of overriding types.
  foreach ($override_types as $message_type) {
    // Ignore message type with unchecked "Purge messages". Also make sure that
    // purging settings are present.
    if (empty($message_type->data['purge']) || empty($message_type->data['purge']['enabled'])) {
      continue;
    }

    $purge_messages += message_get_purgeable_by_type($purge_limit, $message_type->name, $message_type->data['purge']);
  }

  // Gather purgeable messages of non-overriding types according to global
  // settings.
  if (!empty($no_override_type_names)) {
    // Do nothing if purge isn't enabled.
    if (variable_get('message_purge_enable', FALSE)) {
      $purge_settings = array(
        'quota' => variable_get('message_purge_quota', NULL),
        'days' => variable_get('message_purge_days', NULL),
      );

      $purge_messages += message_get_purgeable_by_type($purge_limit, $no_override_type_names, $purge_settings);
    }
  }

  // Delete all gathered messages.
  if (!empty($purge_messages)) {
    message_delete_multiple(array_keys($purge_messages));
  }
}

/**
 * Find purgeable messages according to type and purge settings.
 *
 * @param $purge_limit
 *   The maximal amount of messages to fetch. Decremented each time messages
 *   are fetched.
 * @param $message_type_name
 *   Either a single message type name or an array of names.
 * @param $purge_settings
 *   Array containing purging settings: 'quota' and 'days'.
 *
 * @return array
 *   Messages of the given type(s) that should be purged according to the given
 *   settings.
 *
 * @deprecated
 *  We might need to remove this.
 */
function message_get_purgeable_by_type(&$purge_limit, $message_type_name, $purge_settings) {
  if ($purge_limit <= 0) {
    return;
  }

  // Messages to be deleted.
  $purge_messages = array();

  // Base query for both purging methods.
  $base_query = new EntityFieldQuery();
  $base_query->entityCondition('entity_type', 'message', '=')
    ->propertyCondition('type', $message_type_name, is_array($message_type_name) ? 'IN' : '=')
    // Sort descending, the get the newest first.
    ->propertyOrderBy('timestamp', 'DESC')
    ->propertyOrderBy('mid', 'DESC');

  // Purge according to quota definition.
  if (!empty($purge_settings['quota'])) {
    $quota_query = clone $base_query;
    $result = $quota_query
      ->range($purge_settings['quota'], $purge_limit)
      ->execute();

    if (!empty($result['message'])) {
      $purge_limit -= count($result['message']);
      $purge_messages += $result['message'];
    }
  }

  // Purge according to maximal age definition.
  if (!empty($purge_settings['days'])) {
    $age_query = clone $base_query;
    // Find messages older than current time - maximal age in days times
    // the seconds per day.
    $earlier_than = time() - $purge_settings['days'] * 86400;
    $result = $age_query->propertyCondition('timestamp', $earlier_than, '<')
      ->range(0, $purge_limit)
      ->execute();

    if (!empty($result['message'])) {
      $purge_limit -= count($result['message']);
      $purge_messages += $result['message'];
    }
  }

  return $purge_messages;
}

/**
 * Implements hook_field_extra_fields().
 *
 * @deprecated
 *  We might need to remove this.
 */
function message_field_extra_fields() {
  return;
  $return = array();
  foreach (message_type_load() as $message_type) {

    // Iterate over any "message-text" field.
    foreach (field_info_instances('message_type', $message_type->category) as $field_name => $value) {
      $field = field_info_field($field_name);
      if (empty($field['settings']['message_text'])) {
        continue;
      }

      $field_items = field_get_items('message_type', $message_type, $field_name);
      $count = is_array($field_items) ? count($field_items) : 1;
      for ($delta = 0; $delta < $count; $delta++) {
        $params = array('@label' => $value['label'], '@delta' => $delta);
        $return['message'][$message_type->name]['display']['message__' . $field['field_name'] . '__' . $delta] = array(
          'label' => $count == 1 ? $value['label'] : t('@label @delta partial', $params),
          'description' => $count == 1 ? t('Complete rendered message text.') : t('Rendered message text of the @delta partial', $params),
          'weight' => $delta,
        );
      }
    }
  }

  return $return;
}

/**
 * Implements hook_field_attach_form().
 *
 * Add on every message-text field partail, indication to which view-mode
 * it is assigned to.
 *
 * @deprecated
 *  We might need to remove this.
 */
function message_field_attach_form(\Drupal\Core\Entity\EntityInterface $entity, &$form, &$form_state, $langcode) {
  if ($entity->entityType() != 'message_type' || empty($entity->name)) {
    return;
  }

  $bundle_settings = field_bundle_settings('message', $entity->name);
  $entity_info = entity_get_info('message');
  $current_view_modes = array();
  // Build array keyed by the delta, and the view-modes as value.
  foreach (message_get_text_fields() as $field_name) {
    foreach ($bundle_settings['extra_fields']['display'] as $delta => $view_modes) {
      $identeifer = "message__{$field_name}__";
      if (strpos($delta, $identeifer) !== 0) {
        // Field doesn't exist.
        continue;
      }

      $delta = str_replace($identeifer, '', $delta);
      foreach ($view_modes as $view_mode => $value) {
        if ($value['visible']) {
          $url = "admin/structure/messages/manage/{$entity->name}/display/{$view_mode}";
          $label = $view_mode == 'default' ? t('Default') : $entity_info['view modes'][$view_mode]['label'];
          $current_view_modes[$field_name][$delta][] = l($label, $url);
        }
      }
    }
  }

  foreach (message_get_text_fields() as $field_name) {
    if (empty($form[$field_name])) {
      continue;
    }

    $langcodes = $form[$field_name];
    foreach (element_children($langcodes) as $langcode) {
      $deltas = $form[$field_name][$langcode];
      foreach (element_children($deltas) as $delta) {
        if (empty($current_view_modes[$field_name][$delta])) {
          continue;
        }

        $form[$field_name][$langcode][$delta]['view_mode'] = array(
          '#markup' => t('View modes: !view-modes', array('!view-modes' => implode(', ', $current_view_modes[$field_name][$delta]))),
        );
      }
    }
  }
}

/**
 * Message load.
 *
 * @param $mid
 *   The message ID.
 * @return Message
 *   A message object.
 *
 * @deprecated
 *  We might need to remove this.
 */
function message_load($mid) {
  $result = entity_load('message', array($mid));
  return $result ? reset($result) : FALSE;
}

/**
 * Loads multiple messages.
 *
 * @see entity_load().
 *
 * @deprecated
 *  We might need to remove this.
 */
function message_load_multiple($mids, $conditions = array()) {
  return entity_load('message', $mids, $conditions);
}

/**
 * Get the values of a message property.
 *
 * The value of the message, after intersecting with the same values
 * from the message-type. For example, it is possible to assign
 * $message_type->arguments and $message->arguments. In case there are the
 * same keys in the array, the $message will override the ones from the
 * message-type.
 *
 * @param $message
 *   The message object.
 * @param $name
 *   The property name.
 * @param $key
 *   Optional; If the property is an array, the key to be used to get the
 *   value.
 * @param $default_value
 *   Optional; The default value to assign, if no value is given.
 *
 * @return
 *   The merged values, or if no value if found and empty array.
 *
 * @deprecated
 *  We might need to remove this.
 */
function message_get_property_values(Message $message, $name, $key = NULL, $default_value = array()) {
  $message_type = $message->getType();

  if (isset($key)) {
    $type_value = isset($message_type->{$name}[$key]) ? $message_type->{$name}[$key] : array();
    $value = isset($message->{$name}[$key]) ? $message->{$name}[$key] : array();
  }
  else {
    $type_value = isset($message_type->{$name}) ? $message_type->{$name} : array();
    $value = isset($message->{$name}) ? $message->{$name} : array();
  }

  if (isset($value) && !is_array($value)) {
    // Value was found on the message.
    return $value;
  }
  elseif (isset($type_value) && !is_array($type_value)) {
    // Value was found on the message type.
    return $type_value;
  }
  elseif (!empty($value) || !empty($type_value)){
    // Value was found in one of the entities, and it's an array, so merge.
    return array_merge($type_value, $value);
  }

  // No value found, so return the default value.
  return $default_value;
}

/**
 * Find all message text fields.
 *
 * @return
 *   Array of all field names that are marked as message-text.
 *
 * @deprecated
 *  We might need to remove this.
 */
function message_get_text_fields() {
  $message_fields = array();
  foreach (field_info_fields() as $field_name => $field) {
    if (!empty($field['settings']['message_text'])) {
      $message_fields[] = $field_name;
    }
  }

  return $message_fields;
}

/**
 * Batch callback. Copy the message text fields from one language to others.
 *
 * @param $origin_lang
 *   The origin language.
 * @param $dest_langs
 *   List of destination languages.
 * @param $override
 *   Whether to override existing values.
 *
 * @deprecated
 *  We might need to remove this.
 */
function message_admin_text_copy_batch($origin_lang, $dest_langs, $override, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_id'] = 0;
    $context['sandbox']['max'] = db_select('message_type')
      ->countQuery()
      ->execute()
      ->fetchField();
  }

  $result = db_select('message_type', 'mt')
    ->fields('mt', array('id'))
    ->condition('id', $context['sandbox']['current_id'], '>')
    ->orderBy('id')
    ->range(0, 50)
    ->execute();

  foreach ($result as $row) {
    $context['sandbox']['progress']++;
    $context['sandbox']['current_id'] = $row->id;

    $entity = entity_load_single('message_type', $row->id);
    // Ignore the current message type if it has no value in its origin
    // language.
    if (empty($entity->message_text[$origin_lang])) {
      continue;
    }
    foreach ($entity->message_text[$origin_lang] as $delta => $message_text) {
      // Copy the message text values from the origin language to the
      // destination languages.
      foreach ($dest_langs as $dest_lang) {
        foreach (message_get_text_fields() as $field_name) {
          // Check if there's already a value in the destination language. If so,
          // skip it unless override is checked.
          if (!$override && !empty($entity->{$field_name}[$dest_lang][$delta])) {
            continue;
          }
          // Copy the origin language text.
          $entity->{$field_name}[$dest_lang][$delta] = $message_text;
        }
      }
    }
    // Save the message type with the updated texts.
    message_type_save($entity);
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}
