<?php
// $Id$

/**
 * Test the Message CRUD handling.
 */
class MessageCrud extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Message CRUD',
      'description' => 'Test the create, update and remove of Message entitys.',
      'group' => 'Message',
    );
  }

  function setUp() {
    parent::setUp('ctools', 'entity', 'message');
  }

  /**
   * Test CRUD of message entity.
   */
  function testMessageCrud() {
    global $language;
    $lang = $language->language;
    $web_user = $this->drupalCreateUser();
    $this->drupalLogin($web_user);

    $property = MESSAGE_FIELD_MESSAGE_TYPE_TEXT;

    $text = $this->randomString();
    $message_type = message_type_create('foo', array('text' => array($lang => $text)), TRUE);

    // Reload the message type to see it was saved
    $message_type = message_type_load('foo');
    $this->assertTrue(!empty($message_type->id), t('Message type was saved to the database'));
    // Assert the message type text field exists and is populated.
    $this->assertEqual($message_type->{$property}[$lang][0]['value'], $text, t('Message type text was saved to the database.'));

    $message = message_create('foo', array(), TRUE, $web_user);
    $mid = $message->mid;

    // Reload the message to see it was saved.
    $message = message_load($mid);
    $this->assertTrue(!empty($message->mid), t('Message was saved to the database.'));

    // Assert the default realm values were saved.
    $property = MESSAGE_FIELD_REALM;
    $this->assertEqual($message->{$property}[LANGUAGE_NONE][0]['realm'], 'user', t('Message realm is assigned to the default "user" realm.'));
    $this->assertEqual($message->{$property}[LANGUAGE_NONE][0]['realm_id'], $web_user->uid, t('Message realm ID is equal to the current user.'));
  }
}

/**
 * Test the Message CRUD handling.
 */
class MessageShowMessage extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Message view',
      'description' => 'Test viewing a message.',
      'group' => 'Message',
    );
  }

  function setUp() {
    parent::setUp('ctools', 'entity', 'message');
  }


  /**
   * Test access of message entity.
   */
  function testMessageAccess() {
    $user1 = $this->drupalCreateUser();
    $user2 = $this->drupalCreateUser();
    $this->drupalLogin($user1);

    $message_type = message_type_create('foo', array(), TRUE);
    $message = message_create('foo', array(), TRUE, $user1);

    $mid = $message->mid;

    // Reload the message to see it was saved.
    $message = message_load($mid);

    // Assert the default realm values were saved.
    $property = MESSAGE_FIELD_REALM;
    $this->assertTrue(message_access('view', $message, $user1), t('User may view own message.'));
    $this->assertFalse(message_access('view', $message, $user2), t("User may not view a message from  a realm they do not belong to."));

    // Add the "hide" property to the message entity, to see it's being hidden.
    $message->hide = TRUE;
    $this->assertFalse(message_access('view', $message, $user1), t('User may not view a message set to be hidden.'));
  }

  /**
   * Test showing a message.
   */
  function testMessageView() {
    $web_user = $this->drupalCreateUser();
    $this->drupalLogin($web_user);

    $property = MESSAGE_FIELD_MESSAGE_TYPE_TEXT;

    $text_en = $this->randomString() . ' argument -- @foo';
    $text_es = $this->randomString() . ' argument -- @foo';
    $message_type = message_type_create('foo', array('text' => array('en' => $text_en, 'es' => $text_es)), TRUE);

    // Reload the message type to see it was saved
    $message_type = message_type_load('foo');
    $this->assertTrue(!empty($message_type->id), t('Message type was saved to the database.'));
    // Assert the message type text field exists and is populated.
    $this->assertEqual($message_type->{$property}['en'][0]['value'], $text_en, t('English message type text was saved to the database.'));
    $this->assertEqual($message_type->{$property}['es'][0]['value'], $text_es, t('Spanish message type text was saved to the database.'));


    $arguments = array('@foo' => $this->randomName(4));
    $message = message_create('foo', array('arguments' => $arguments), TRUE, $web_user);

    // Assert the arguments in the message are replaced.
    $output = message_show_message($message, TRUE, $web_user);
    $this->assertEqual(strip_tags($output), strtr($text_en, $arguments), t('Arguments in the English message were replaced.'));

    // Assert the arguments in the message are replaced when showing a message
    // from another language.
    $output = message_show_message($message, TRUE, $web_user, 'es');
    $this->assertEqual(strip_tags($output), strtr($text_es, $arguments), t('Arguments in the Spanish message were replaced.'));
  }
}